name: Check GraphAI Samples

on:
  pull_request:
    paths:
      - "packages/**"
      - "agents/**"
      - "llm_agents/**"
      - ".github/scripts/tutorial_yml/**"
  workflow_dispatch: # 手動実行用

jobs:
  run-samples:
    name: Run GraphAI Samples
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        node-version: [20.x]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"

      - name: Install dependencies
        run: yarn install

      - name: Build packages
        run: yarn run build

      - name: Install GraphAI CLI
        run: npm i -g @receptron/graphai_cli

      - name: Make scripts executable
        run: chmod +x .github/scripts/run_samples.sh

      - name: Debug directory structure
        run: |
          echo "Checking for .github/scripts/tutorial_yml directory:"
          ls -la .github/scripts/tutorial_yml/ || echo ".github/scripts/tutorial_yml directory not found"

      - name: Run samples
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: ./.github/scripts/run_samples.sh --output github-actions --timeout 180 --verbose
        continue-on-error: true

      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: test_results/
          retention-days: 7

  summarize-results:
    name: Summarize Results
    needs: run-samples
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Install jq
        run: sudo apt-get install -y jq
        
      - name: Make scripts executable
        run: chmod +x .github/scripts/suggest_fixes.sh

      - name: Summarize results
        run: |
          echo "## GraphAI サンプル実行結果" > summary.md
          echo "" >> summary.md

          # 全体サマリーの作成
          echo "<details open>" >> summary.md
          echo "<summary><b>📊 実行サマリー</b></summary>" >> summary.md
          echo "" >> summary.md

          # 全体の統計情報を計算
          yaml_total=0
          yaml_success=0
          yaml_failure=0
          yaml_timeout=0
          yaml_cached=0
          yaml_skipped=0

          if [ -f artifacts/test-results/yaml_results.csv ]; then
            yaml_total=$(grep -v "^sample" artifacts/test-results/yaml_results.csv | wc -l)
            yaml_success=$(grep ",success," artifacts/test-results/yaml_results.csv | wc -l)
            yaml_failure=$(grep ",failure," artifacts/test-results/yaml_results.csv | wc -l)
            yaml_timeout=$(grep ",timeout," artifacts/test-results/yaml_results.csv | wc -l)
            yaml_cached=$(grep ",cached," artifacts/test-results/yaml_results.csv | wc -l)
            yaml_skipped=$(grep ",skipped," artifacts/test-results/yaml_results.csv | wc -l)
          fi

          # 成功率の計算
          yaml_success_rate=0
          if [ $((yaml_total - yaml_skipped)) -gt 0 ]; then
            yaml_success_rate=$(echo "scale=2; ${yaml_success} * 100 / $((yaml_total - yaml_skipped))" | bc)
          fi

          # サマリーテーブルの作成
          echo "| カテゴリ | 成功率 | 成功 | 失敗 | タイムアウト | キャッシュ済み | スキップ | 合計 |" >> summary.md
          echo "| :--- | :---: | :---: | :---: | :---: | :---: | :---: | :---: |" >> summary.md
          echo "| YAMLサンプル | ${yaml_success_rate}% | ${yaml_success} | ${yaml_failure} | ${yaml_timeout} | ${yaml_cached} | ${yaml_skipped} | ${yaml_total} |" >> summary.md
          echo "" >> summary.md
          echo "</details>" >> summary.md
          echo "" >> summary.md

          # 詳細な実行結果
          if [ -f artifacts/test-results/yaml_results.csv ]; then
            echo "<details>" >> summary.md
            echo "<summary><b>📘 YAMLサンプル実行結果</b></summary>" >> summary.md
            echo "" >> summary.md
            
            # 詳細な実行結果テーブル
            echo "### 詳細な実行結果" >> summary.md
            echo "" >> summary.md
            echo "| サンプル | ステータス | 実行時間 |" >> summary.md
            echo "| :--- | :---: | :---: |" >> summary.md
            
            grep -v "^sample" artifacts/test-results/yaml_results.csv | sort | while IFS=, read -r sample status duration hash; do
              if [ "$status" = "success" ]; then
                status_icon="✅ 成功"
              elif [ "$status" = "failure" ]; then
                status_icon="❌ 失敗"
              elif [ "$status" = "timeout" ]; then
                status_icon="⏱️ タイムアウト"
              elif [ "$status" = "cached" ]; then
                status_icon="⚡ キャッシュ済み"
              else
                status_icon="⏭️ スキップ"
              fi
              
              echo "| ${sample} | ${status_icon} | ${duration}秒 |" >> summary.md
            done
            
            echo "" >> summary.md
            echo "</details>" >> summary.md
            echo "" >> summary.md
          fi

          # 失敗したサンプルがある場合は特別なセクションを追加
          if [ -f artifacts/test-results/yaml_results.csv ] && grep -q ",failure," artifacts/test-results/yaml_results.csv; then
            echo "<details>" >> summary.md
            echo "<summary><b>🔍 失敗したサンプル</b></summary>" >> summary.md
            echo "" >> summary.md
            
            echo "| サンプル | ステータス |" >> summary.md
            echo "| :--- | :---: |" >> summary.md
            
            grep ",failure," artifacts/test-results/yaml_results.csv | while IFS=, read -r sample status duration hash; do
              echo "| ${sample} | ❌ 失敗 |" >> summary.md
            done
            
            grep ",timeout," artifacts/test-results/yaml_results.csv | while IFS=, read -r sample status duration hash; do
              echo "| ${sample} | ⏱️ タイムアウト |" >> summary.md
            done
            
            echo "" >> summary.md
            echo "</details>" >> summary.md
            echo "" >> summary.md
          fi

          cat summary.md

      - name: Find PR number
        if: github.event_name == 'pull_request'
        id: pr
        run: echo "number=${{ github.event.pull_request.number }}" >> $GITHUB_OUTPUT

      - name: Prepare test results directory
        run: |
          mkdir -p test_results/logs/yaml_samples
          
          # YAMLサンプルの結果をコピー
          if [ -f artifacts/test-results/yaml_results.csv ]; then
            cp artifacts/test-results/yaml_results.csv test_results/
            if [ -d artifacts/test-results/logs/yaml_samples ]; then
              cp -r artifacts/test-results/logs/yaml_samples/* test_results/logs/yaml_samples/
            fi
          fi

      - name: Generate fix suggestions
        if: github.event_name == 'pull_request'
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: ./.github/scripts/suggest_fixes.sh
        continue-on-error: true

      - name: Comment on PR with results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('summary.md', 'utf8');
            
            // PRコメントにサマリーを追加
            await github.rest.issues.createComment({
              issue_number: ${{ steps.pr.outputs.number }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });
            
            // 修正提案がある場合は別のコメントとして追加
            if (fs.existsSync('test_results/fix_suggestions.md')) {
              const suggestions = fs.readFileSync('test_results/fix_suggestions.md', 'utf8');
              
              await github.rest.issues.createComment({
                issue_number: ${{ steps.pr.outputs.number }},
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: suggestions
              });
            }
